---
import Header from "./Header.astro";
import { generateHeroFrameUrls } from "../utils/imageLoader";

const totalFrames = 151 as const;
const frameUrls = generateHeroFrameUrls(totalFrames);
---

<section class="hero container">
  <div id="loading-screen" class="loading-screen">
    <div class="loader-content">
      <div class="spinner"></div>
      <p class="loader-text">Estamos cargando todos los recursos necesarios para la web.<br />Espere un momento...</p>
    </div>
  </div>

  <Header logo="/logo.png" />

  <div class="sequence-container">
    <div id="moto-image" class="hero-moto-image"></div>
    <img id="sequence-loader" class="sequence-loader" src="/frames/moto-001.webp" alt="Moto Sequence Loader" />
  </div>

  <div class="animation_spacer"></div>
</section>


<script is:inline define:vars={{ frameUrls, totalFrames }}>
  const imageCache = new Map();
  let currentFrame = 0;
  let isLoaded = false;
  let ticking = false;
  let maxScroll = 0;

  const motoImage = document.getElementById("moto-image");
  const loader = document.getElementById("sequence-loader");

  async function preloadImages() {
    const loadingPromises = frameUrls.map((url, index) => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => {
          imageCache.set(index, img);
          resolve();
        };
        img.onerror = reject;
        img.src = url;
      });
    });

    try {
      await Promise.all(loadingPromises);
      isLoaded = true;
      loader?.remove();
      updateImage(0);
    } catch (error) {
      console.error("Erreur de chargement:", error);
    }
  }

  function updateImage(frame) {
    if (!isLoaded || !motoImage) return;

    const cachedImage = imageCache.get(frame);
    if (cachedImage) {
      const imageUrl = cachedImage.src;
      motoImage.style.backgroundImage = `url('${imageUrl}')`;
    }
  }

  function calculateMaxScroll() {
    const heroSectionHeight = 2585;

    const windowHeight = window.innerHeight;
    maxScroll = heroSectionHeight - windowHeight;
    return maxScroll;
  }

  function handleScroll() {
    if (!isLoaded) return;

    if (!ticking) {
      requestAnimationFrame(() => {
        const scrollPosition = window.scrollY;
        if (maxScroll <= 0) {
          calculateMaxScroll();
        }

        if (maxScroll > 0) {
          const scrollFraction = Math.max(0, Math.min(1, scrollPosition / maxScroll));
          const frame = Math.min(Math.floor(scrollFraction * (totalFrames - 1)), totalFrames - 1);

          if (frame !== currentFrame) {
            currentFrame = frame;
            updateImage(frame);
          }
        }
        ticking = false;
      });
      ticking = true;
    }
  }

  function init() {
    disableScroll();
    calculateMaxScroll();

    preloadImages().then(() => {
      isLoaded = true;
      updateImage(0);
      hideLoadingScreen();
      enableScroll();
      window.addEventListener("scroll", handleScroll, { passive: true });
    });

    window.addEventListener(
      "resize",
      () => {
        calculateMaxScroll();
      },
      { passive: true }
    );
  }

  function disableScroll() {
  document.body.style.overflow = "hidden";
}

function enableScroll() {
  document.body.style.overflow = "";
}

function hideLoadingScreen() {
  const loadingScreen = document.getElementById("loading-screen");
  if (loadingScreen) {
    loadingScreen.classList.add("hidden");
    setTimeout(() => {
      loadingScreen.remove();
    }, 400); 
  }
}

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>

<style>
  .hero {
    height: 250dvh;
    background-attachment: scroll;
  }

  .animation_spacer {
    display: block;
    height: 100dvh;
  }

  .sequence-container {
    width: 100dvw;
    height: 100dvh;
    object-fit: cover;
    position: fixed;
    z-index: -20;
  }

  .hero-moto-image {
    width: 100dvw;
    height: 100dvh;
    object-fit: cover;
    position: fixed;
    top: 0;
    left: 0;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    will-change: background-image;
  }

  .sequence-loader {
    width: 100dvw;
    height: 100dvh;
    object-fit: cover;
    position: fixed;
    top: 0;
    left: 0;
  }

.loading-screen {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #0a0a0a;
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.4s ease;
}

.loader-content {
  text-align: center;
  color: #fff;
  font-family: Consolas, monospace;
}

.loader-text {
  margin-top: 1rem;
  font-size: 1.25rem;
  max-width: 80vw;     
  text-align: center;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 4px solid rgba(255, 255, 255, 0.2);
  border-top: 4px solid #fff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.loading-screen.hidden {
  opacity: 0;
  pointer-events: none;
}

</style>